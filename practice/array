import sys
#Find length of maximum incresing subsequense
"""
    Example: [5, 8, 7, 1, 9] ===> 589 and 579
    Subsequence is the sequence of items may not be contiguous - some element can be skipped

    # https://www.youtube.com/watch?v=mouCn3CFpgg
"""

def len_max_subsequence(arr):
    length = len(arr)
    lis = [1] * length

    for i in range(length):
        for j in range(i):
            if(arr[i] > arr[j]) and (lis[i] <= lis[j]):
                lis[i] = 1 + lis[j]
    print(lis)
    return max(lis)

arr = [5, 8, 7, 1, 9]
ret = len_max_subsequence(arr)
print(ret)

"""
    Largest sum contiguous sub array
    arr = [-2, -3 4 -1 -2 1 5 -3]
    result => 4 + -1 + -2 + 1 + 5 = 7 
"""


def largest_sum_subarray(arr):
    cur_sum = 0
    max_sum = -sys.maxsize - 1

    for i in range(len(arr)):
        cur_sum += arr[i]
        if cur_sum < arr[i]:
            cur_sum = arr[i]
        if cur_sum > max_sum:
            max_sum = cur_sum

    return max_sum


arr = [-2, -3, -4, -1, -20, -1, 5, -3]
ret = largest_sum_subarray(arr)
print(ret)

"""
    Best time to BUy and Sell to maximize the profit
    arr = [7 1 5 3 6 4]
    result => 1 - 5 , 3 - 6 => 7 
    
"""


def maximize_profit(arr):
    # cur_min = sys.maxsize
    # cur_profit = 0
    # max_profit = -sys.maxsize - 1
    #
    # for i in range(len(arr)):
    #     if arr[i] < cur_min:
    #         cur_min = arr[i]
    #     cur_profit = arr[i] - cur_min
    #     if cur_profit > max_profit:
    #         max_profit = cur_profit
    # return max_profit

    max_profit = 0
    for i in range(1, len(arr)):
        if arr[i] > arr[i -1]:
            max_profit += (arr[i] - arr[i-1])
    return max_profit


ret = maximize_profit([3, 1, 5, 6, 3, 4, 25 ])
print(ret)

"""
    Count number of x if x+1 present in an array
    arr = [1, 1, 2, 3, 4] 
    res = 1 - 2, 1 - 2, 2 -3 3- 4 => 4
"""


def count_consecutive_numbers(arr):
    dic = {}
    for elmnt in arr:
        dic[elmnt] = dic.get(elmnt, 0) + 1

    # Search in array
    count = 0
    for elmnt in arr:
        if elmnt + 1 in dic:
            count += dic[elmnt+1]
    return count


ret = count_consecutive_numbers([1, 1, 2, 4])
print(ret)

""""
    Find maximum length of subarray containing equal number of 0 and 1 in binary array
    binary array all elements are either 0 | 1
    arr = [1 1 1 0 0 1 0 1 1 1] => 1-6 having 3 zeo and 3 one
    
    Approach:
    sum = [1 2 3 2 1 2 1 2 3 4] == when sum value exists earlier means there is no change of sum
    so equal number of 1 and 0
    if sum == 0, till this point equal number of 0 and 1 from beginning
    Use a dict to keep sum=>index (index of sum element)
    
    Backtracking approach
    https://www.youtube.com/watch?v=9ZyLjjk536U&list=PLEJXowNB4kPwCPVjDv6KsAsThtDOCQUok&index=13
"""


def max_subarray_equal_zero_one(arr):
    dic = {}
    sum = 0
    length = len(arr)
    max_window = -sys.maxsize-1

    for i in range(length):
        if arr[i] == 1:
            sum += arr[i]
        else:
            sum += -1  # For 0 add  -1
        if sum == 0:
            max_window = max(max_window, i + 1)
        elif sum in dic:
            max_window = max(max_window, i - dic[sum])
        else:
            dic[sum] = i

    return max_window


arr = [1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1]
ret = max_subarray_equal_zero_one(arr)
print(ret)

""""
    Product of array except self
    arr = [ 1 3 4 2 6]
    output = [ 3*4*2*6 1*4*2*6 1*3*2*6 1*3*4*6 1*3*4*2]
    
    Approach:
    tmp = [ 1 3 12 24 144]
    rightproduct = from last to first traverse the arr and update tmp
                   for last element product will be the product of element till n -1
                   which is tmp[n -2]
                   
    
    https://www.youtube.com/watch?v=gREVHiZjXeQ&list=PLEJXowNB4kPwCPVjDv6KsAsThtDOCQUok&index=15
"""


def product_except_self(arr):
    length = len(arr)
    left_product = 1
    tmp = []

    for i in range(length):
        left_product *= arr[i]
        tmp.append(left_product)

    # Last elemnt will be product of all elements upto second last (inclusive)
    tmp[length - 1] = tmp[length - 2]
    right_product = 1
    for i in range(length - 2, -1, -1):
        right_product *= arr[i+1]
        tmp[i] = tmp[i-1] * right_product

    # First product element equal to product of all element except first
    tmp[0] = right_product
    print(right_product)
    print(tmp)


arr = [2, 3, 6, 5, 4]
product_except_self(arr)


"""
    Search an element in rotated sorted array
    arr = [4 5 6 7 0 1 2 3] [5 6 7 0 1 2 3 4] [3 4 5 6 7 0 1 2]
    
    #Approach:
    Get index of MID element =. 1 of both side of MID element is strictly increasing order
    [4 5 6 7 0 1 2 3] - L=0 R=7 MID=(R+L)/2 => arr[3] = 7 =>Both side in increasing order
    [5 6 7 0 1 2 3 4] - MID arr[3] = 0 => Right side in increasing order
    [3 4 5 6 7 0 1 2] - MID arr[3] = 6 => Left side in increasing order
    
    -> Check the element if it falls in the side of increasing order 
    -> Use Binary search
    
    https://www.youtube.com/watch?v=oTfPJKGEHcc&list=PLEJXowNB4kPwCPVjDv6KsAsThtDOCQUok&index=19
"""


def seach_sorted_rotated_array(arr, elemnt):

    low = 0
    high = len(arr) - 1

    while low < high:
        mid = low + (high - low) // 2
        if arr[mid] == elemnt:
            return True
        # Left side in increasing order
        elif arr[mid] > arr[0]:
            if (elemnt >= arr[0]) and (elemnt < arr[mid]):
                high = mid - 1
            else:
                low = mid + 1
        # right side increasing order
        else:
            if (elemnt > arr[mid]) and (elemnt < arr[high]):
                low = mid + 1
            else:
                high = mid - 1
    return False


arr = [7, 8, 0, 1, 2, 3, 4, 5, 6]

print(seach_sorted_rotated_array(arr, 5))


""""
    Remove k digits from Number to make it smallest
    num = 372181 k=2 -> 2181
    k = 3 ->211
    
    Approach : Peak valley --> if num at index is greater than next index remove it
             : use stack to store previous max
    
    https://www.youtube.com/watch?v=3QJzHqNAEXs&list=PLEJXowNB4kPwR6C6yq3BzS-Jkyc6XE8kE&index=13  
"""


def remove_digit_get_smallest(num, k):
    tmp = []

    for ch in num:
        while tmp and ch < tmp[0] and k > 0:
            tmp.pop(0)
            k -= 1
        if not tmp or ch != 0:
            tmp.insert(0, ch)

    # All are in ascending order
    while tmp and k > 0:
        tmp.pop(0)
        k -= 1
    # print(tmp)
    if not tmp:
        return 0
    small_num = ''.join(reversed(tmp))

    return small_num


ret = remove_digit_get_smallest("372181", 2)
# ret = remove_digit_get_smallest("372181", 3)
# ret = remove_digit_get_smallest("123", 2)
print(ret)

""""
    Find position of anagrams of str2 in str1
    str1 = "abcdcbaefgbca"
    str2 = "abc"
    res = [0, 4, 10]
    
    Approach: Sliding window
    
    https://www.youtube.com/watch?v=_Rr0nbmClko
"""


def get_pos_of_all_anagrams(str1, str2):
    map_str1 = {}
    map_str2 = {}
    result = []
    k = len(str2)

    for ch in str2:
        map_str2[ch] = map_str2.get(ch, 0) + 1

    for i in range(len(str1)):
        map_str1[str1[i]] = map_str1.get(str1[i], 0) + 1
        if i+1 >= len(str2):
            if map_str1 == map_str2:
                result.append(i+1-k)

            map_str1[str1[i+1-k]] -= 1
            if map_str1[str1[i+1-k]] == 0:
                del (map_str1[str1[i + 1 - k]])
    return result


str1 = "abcdcbaefgbca"
str2 = "abc"
result = get_pos_of_all_anagrams(str1, str2)
print(result)

""""
    Subarray with Max product
    arr = [3, 4, -5, 2, 7]
    res = 14
"""


def max_product(arr):
    mx_prod = arr[0]
    mn_prod = arr[0]
    res_max, res_min = arr[0], arr[0]

    for i in range(1,len(arr)):
        if arr[i] < 0:
            mx_prod, mn_prod = mn_prod, mx_prod

        mx_prod = max(arr[i], mx_prod*arr[i])
        mn_prod = min(arr[i], mn_prod*arr[i])
        res_max = max(res_max, mx_prod)
        res_min = min(res_min, mn_prod)
        
    return(res_max,res_min)
arr = [3, 4, -5, 2, 7]
print(arr)


""""
    Minimum subarray with sum 
    arr = [2, 4, 5, 8, 3, 11]
    minsubarray = arr[5:5]
    
    Approach: Sliding window
"""
def min_subarray_sum_k(arr, k):
    cur_sum = 0
    min_window = len(arr)
    start = 0

    for end in range(len(arr)):
        cur_sum += arr[end]

        while cur_sum > k:
            cur_sum -= arr[start]
            start += 1

        if cur_sum == k:
            min_window = min(min_window, end-start+1)
            final_start = start
            final_end = end

    return final_start, final_end


arr = [2, 4, 5, 8, 3, 11]
start, end = min_subarray_sum_k(arr, 11)
print(start, end)

# Factorial of large number
def multiply(arr,y):
    # print(arr)
    carry = 0
    for i in range(len(arr)-1,-1,-1):
        tmp = arr[i] * y + carry
        arr[i] = tmp % 10
        carry = tmp // 10
    while carry:
        arr.insert(0, carry)
        carry = carry // 10

    print(arr)
    return int(''.join([str(x) for x in arr]))


def factorial_large_number(n):
    if n < 2:
        return 1
    fact = 1
    for i in range(2, n+1):
        fact = multiply([int(x) for x in str(fact)], i)

    return fact

ret = factorial_large_number(4)
print(ret)

# Arrange positive and negative in alternate
arr = [-5, -2, 5, 2, 4, -7, 1, 8, 0, -8]
start = 0
end = len(arr) - 1
while(start <= end):
    if arr[start] >0 and arr[end] < 0:
        arr[start], arr[end] = arr[end], arr[start]
        start += 1
        end -= 1
    elif arr[start] < 0:
        start += 1
    elif arr[end] >= 0:
        end -= 1
print(start)

print(arr)

i = 1
while( i < start or arr[i] < 0):
    arr[i], arr[start] = arr[start], arr[i]
    i += 2
    start += 1


print(arr)
